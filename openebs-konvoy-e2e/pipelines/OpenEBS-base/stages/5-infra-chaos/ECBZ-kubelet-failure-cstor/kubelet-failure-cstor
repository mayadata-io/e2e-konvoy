#!/bin/bash

pod(){

node_name=$(sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port kubectl get nodes --no-headers | grep -v master | awk 'FNR==1 {print $1}')

echo $node_name
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-konvoy && bash openebs-konvoy-e2e/pipelines/OpenEBS-base/stages/5-infra-chaos/ECBZ-kubelet-failure-cstor/kubelet-failure-cstor node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$node_name'"' '"'$RELEASE_TAG'"'

}

node() {

job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
source ~/.profile
gittoken=$(echo "$github_token")
case_id=ECBZ
observer_node=$4

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir
bash openebs-konvoy-e2e/utils/pooling jobname:containerd-failure-cstor
bash openebs-konvoy-e2e/utils/e2e-cr jobname:kubelet-failure-cstor jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"

################
# LitmusBook 1 #
################

echo "*******Deploying Busybox-Deployment*******"

test_name=$(bash openebs-konvoy-e2e/utils/generate_test_name testcase=busybox-provision-kubelet-failure-cstor metadata="")
echo $test_name

cd litmus
echo "Running the litmus test for Busybox Deployment.."
cp apps/busybox/deployers/run_litmus_test.yml busybox_deploy_kubelet_failure_cstor.yml

: << EOF
  -------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                             |
  -------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | kubelet-failure-cstor                                    |
 | Litmus job label  | label  | app: busybox-litmus                 | app: busybox-deploy-kubelet-failure-cstor                | 
 | storage class     | env    | openebs-cstor-sparse                | openebs-cstor-disk                             |
 | deploy type       | env    | statefulset                         | deployment                                     |
  --------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: kubelet-failure-cstor/g' \
-e 's/app: busybox-litmus/app: busybox-deploy-kubelet-failure-cstor/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-cstor-disk/g' \
-e 's/statefulset/deployment/g' busybox_deploy_kubelet_failure_cstor.yml

cat busybox_deploy_kubelet_failure_cstor.yml

bash ../openebs-konvoy-e2e/utils/litmus_job_runner label='app:busybox-deploy-kubelet-failure-cstor' busybox_deploy_kubelet_failure_cstor.yml
cd ..
bash openebs-konvoy-e2e/utils/dump_cluster_state;
bash openebs-konvoy-e2e/utils/event_updater jobname:kubelet-failure-cstor $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 openebs-konvoy-e2e/utils/result/result_update.py $job_id ECBZ 5-infra-chaos "stop the kubelet service on the node where application is running and check the behaviour" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# LitmusBook 2 #
################

run_id="kubelet-failure-cstor";test_name=$(bash openebs-konvoy-e2e/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd litmus
cp apps/busybox/liveness/run_litmus_test.yml busybox_liveness_kubelet_failure_cstor.yml

# Update the environmental variables in litmus job spec.

: << EOF
  ----------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | kubelet-failure-cstor                                     | 
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: busybox-liveness-kubelet-failure-cstor           |
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: kubelet-failure-cstor/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: busybox-liveness-kubelet-failure-cstor/g' busybox_liveness_kubelet_failure_cstor.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_liveness_kubelet_failure_cstor.yml

cat busybox_liveness_kubelet_failure_cstor.yml

# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../openebs-konvoy-e2e/utils/litmus_job_runner label='liveness:busybox-liveness-kubelet-failure-cstor' job=busybox_liveness_kubelet_failure_cstor.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash openebs-konvoy-e2e/utils/dump_cluster_state;
# Update the e2e event for the job.
bash openebs-konvoy-e2e/utils/event_updater jobname:kubelet-failure-cstor $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 openebs-konvoy-e2e/utils/result/result_update.py $job_id ECBZ 5-infra-chaos "stop the kubelet service on the node where application is running and check the behaviour" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# LitmusBook 3 #
################

run_id="cstor";test_name=$(bash openebs-konvoy-e2e/utils/generate_test_name testcase=svc-failure-chaos metadata=${run_id})
echo $test_name

cd litmus
cp experiments/chaos/kubernetes/service_failure/run_litmus_test.yml run_kubelet_failure_test_cstor.yml

# Update the environmental variables in litmus job spec.

sed -i -e '/name: OPERATOR_NAMESPACE/{n;s/.*/            value: openebs/g}' \
-e 's/name: svc-failure-chaos/name: kubelet-failure-chaos-cstor/g' \
-e '/name: APP_NAMESPACE/{n;s/.*/            value: kubelet-failure-cstor/g}' \
-e '/name: APP_LABEL/{n;s/.*/            value: app=busybox-sts/g}' \
-e '/name: APP_PVC/{n;s/.*/            value: openebs-busybox/g}' \
-e '/name: SVC_TYPE/{n;s/.*/            value: kubelet/g}' \
-e 's/password:/password: VGVzdEAxMjM=/g' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: busybox/}' run_kubelet_failure_test_cstor.yml

sed -i -e "s|#nodeSelector|nodeSelector|g" \
-e "s|#  kubernetes.io/hostname:|  kubernetes.io/hostname: ${observer_node}|g" run_kubelet_failure_test_cstor.yml

sed -i '/parameters.yml: |/a \
    blocksize: 4k\
    blockcount: 1024\
    testfile: kubeletfailuretest
' run_kubelet_failure_test_cstor.yml

cat run_kubelet_failure_test_cstor.yml

# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../openebs-konvoy-e2e/utils/litmus_job_runner label='name:kubelet-failure-chaos-cstor' job=run_kubelet_failure_test_cstor.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash openebs-konvoy-e2e/utils/dump_cluster_state;
# Update the e2e event for the job.
bash openebs-konvoy-e2e/utils/event_updater jobname:kubelet-failure-cstor $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 openebs-konvoy-e2e/utils/result/result_update.py $job_id ECBZ 5-infra-chaos "stop the kubelet service on the node where application is running and check the behaviour" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# LitmusBook 4 #
################

run_id="deprovision-kubelet-failure-cstor";test_name=$(bash openebs-konvoy-e2e/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd litmus
cp apps/busybox/liveness/run_litmus_test.yml busybox_liveness_deprovision_kubelet_failure_cstor.yml

# Update the environmental variables in litmus job spec.

sed -i -e 's/value: app-busybox-ns/value: kubelet-failure-cstor/g' \
-e 's/value: provision/value: deprovision/g' \
-e 's/generateName: litmus-busybox-liveness/generateName: busybox-liveness-dep-kubelet-failure/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: busybox-liveness-dep-kubelet-failure-cstor/g' busybox_liveness_deprovision_kubelet_failure_cstor.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_liveness_deprovision_kubelet_failure_cstor.yml

cat busybox_liveness_deprovision_kubelet_failure_cstor.yml

# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../openebs-konvoy-e2e/utils/litmus_job_runner label='liveness:busybox-liveness-dep-kubelet-failure-cstor' job=busybox_liveness_deprovision_kubelet_failure_cstor.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash openebs-konvoy-e2e/utils/dump_cluster_state;
# Update the e2e event for the job.
bash openebs-konvoy-e2e/utils/event_updater jobname:kubelet-failure-cstor $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 openebs-konvoy-e2e/utils/result/result_update.py $job_id ECBZ 5-infra-chaos "stop the kubelet service on the node where application is running and check the behaviour" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# LitmusBook 5 #
################

echo "*******Deprovision Busybox-Deployment*******"

test_name=$(bash openebs-konvoy-e2e/utils/generate_test_name testcase=busybox-deprovision-kubelet-failure-cstor metadata="")
echo $test_name

cd litmus
echo "Running the litmus test for Busybox Application Deprovision.."
cp apps/busybox/deployers/run_litmus_test.yml busybox_deprovision_kubelet_failure_cstor.yml

sed -i -e 's/value: app-busybox-ns/value: kubelet-failure-cstor/g' \
-e 's/app: busybox-litmus/app: busybox-dep-kubelet-failure-cstor/g' \
-e 's/value: provision/value: deprovision/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-cstor-disk/g' \
-e 's/statefulset/deployment/g' busybox_deprovision_kubelet_failure_cstor.yml

cat busybox_deprovision_kubelet_failure_cstor.yml

bash ../openebs-konvoy-e2e/utils/litmus_job_runner label='app:busybox-dep-kubelet-failure-cstor' busybox_deprovision_kubelet_failure_cstor.yml
cd ..
bash openebs-konvoy-e2e/utils/dump_cluster_state;
bash openebs-konvoy-e2e/utils/event_updater jobname:kubelet-failure-cstor $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)
current_time=$(eval $time)

# testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)

if [ "$rc_val" != "0" ]; then
bash openebs-konvoy-e2e/utils/e2e-cr jobname:kubelet-failure-cstor jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Fail
python3 openebs-konvoy-e2e/utils/result/result_update.py $job_id UUPF 5-infra-chaos "stop the kubelet service on the node where application is running and check the behaviour" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

bash openebs-konvoy-e2e/utils/e2e-cr jobname:kubelet-failure-cstor jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Pass
python3 openebs-konvoy-e2e/utils/result/result_update.py $job_id UUPF 5-infra-chaos "stop the kubelet service on the node where application is running and check the behaviour" Pass $pipeline_id "$current_time" $commit_id $gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi
}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5 $6
else
  pod
fi