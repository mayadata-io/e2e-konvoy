#!/bin/bash
set -ex

######################
##   ENVIRONMENT    ##
######################

present_dir=$(pwd)
#clone e2e-infrastructre to get the latest commits and run env-exporter script from env
git clone https://github.com/openebs/e2e-infrastructure.git
cd e2e-infrastructure/env
##exporting jiva-controller-image as env##
export OPENEBS_IO_JIVA_CONTROLLER_IMAGE=$(eval python env_exporter.py -o jcontroller -fp ../baseline/baseline)
##exporting jiva-replica-image as env##
export OPENEBS_IO_JIVA_REPLICA_IMAGE=$(eval python env_exporter.py -o jreplica -fp ../baseline/baseline)
##exporting m-apiserver as env##
export MAYA_APISERVER_IMAGE=$(eval python env_exporter.py -o mapi -fp ../baseline/baseline)
##exporting maya-volume-exporter as env##
export OPENEBS_IO_VOLUME_MONITOR_IMAGE=$(eval python env_exporter.py -o iovolume -fp ../baseline/baseline)
##exporting istgt-image as env##
export OPENEBS_IO_CSTOR_VOLUME_MGMT_IMAGE=$(eval python env_exporter.py -o cvolmgmt -fp ../baseline/baseline)
##exporting zfs-image as env##
export OPENEBS_IO_CSTOR_POOL_MGMT_IMAGE=$(eval python env_exporter.py -o cpoolmgmt -fp ../baseline/baseline)
##
export OPENEBS_IO_CSTOR_POOL_IMAGE=$(eval python env_exporter.py -o cstorpool -fp ../baseline/baseline)
##
export OPENEBS_IO_CSTOR_TARGET_IMAGE=$(eval python env_exporter.py -o target -fp ../baseline/baseline)
##
export INSTALL_DEFAULT_CSP=true

cd $present_dir

test_name=$(${utils_path}/generate_test_name testcase=openebs-provision metadata="")

## Display pipeline info
echo $CI_PIPELINE_ID; echo $CI_PIPELINE_IID; echo $CI_COMMIT_SHA

${utils_path}/task_delimiter;

###################
## DEPENDENCIES  ##
###################

ls ${utils_path}

echo "Setting up test dependencies.."
${utils_path}/setup_dependencies litmus-test 

for i in efk-vars.yml efk.yml get_url.yml; do
  wget https://raw.githubusercontent.com/openebs/e2e-infrastructure/master/workload/efk-client/playbook/$i
done

echo "EFK: Deploying Aggregrator and Forwarder on client"
ansible-playbook efk.yml --extra-vars "commit_id=$CI_COMMIT_SHA pipeline_id=$CI_PIPELINE_ID e_user=$E_USER e_password=$E_PASSWORD" 

## Clone the litmus repo, navigate to litmus root 

git clone https://github.com/openebs/litmus.git
cd litmus

${utils_path}/task_delimiter;

############################
## LITMUS PRECONDITIONING ##
############################
#update openebs litmus job
wget https://raw.githubusercontent.com/openebs/e2e-infrastructure/master/env-update/env.py # script to update openebs_setup.yaml
python3 env.py -f providers/openebs/installers/operator/master/litmusbook/run_litmus_test.yaml

echo "updated yaml"
cat providers/openebs/installers/operator/master/litmusbook/run_litmus_test.yaml
cp providers/openebs/installers/operator/master/litmusbook/run_litmus_test.yaml run_test.yml

#update openebs litmus job
wget https://raw.githubusercontent.com/openebs/e2e-infrastructure/master/env-update/env.py # script to update openebs_setup.yaml
python3 env.py -f providers/openebs/installers/operator/master/litmusbook/run_litmus_test.yaml

echo "updated yaml"
cat providers/openebs/installers/operator/master/litmusbook/run_litmus_test.yaml

#################
## RUNNER MAIN ##
#################

echo "Running litmus test for openebs deploy.."
${utils_path}/litmus_job_runner label='provider:openebs-runner' job=run_test.yml
${utils_path}/task_delimiter;

echo "Dumping state of cluster post job run"; echo ""
${utils_path}/dump_cluster_state;
${utils_path}/task_delimiter;

#################
## GET RESULT  ##
#################

## Check the test status & result from the litmus result custom resource
${utils_path}/get_litmus_result ${test_name}

